CHARALAMBOS ARIS ONOUFRIOU THESIS CODE 

install.packages("ape")
library(ape)
install.packages("reshape2")
library(reshape2)
install.packages("rlist")
library(rlist)
install.packages("missForest")
library(missForest)
install.packages("geiger")
library(geiger)
install.packages("nlme")
library(nlme)
install.packages("phytools")
library(phytools)
install.packages("caper")
library(caper)
install.packages("stats")
library(stats)
install.packages("phylolm")
library(phylolm)
install.packages("httr")
library(httr)
install.packages("expm")
library(expm)

##Download traits from coral traits site##


traits_list<-c(77, 104, 60, 8, 128, 41) 

allTrait_list <- list() 

for (i in traits_list) { 
  
  traitURL<-paste("https://coraltraits.org/traits/",i,".csv",sep = "") 
  
  metadata<-read.csv(traitURL,as.is=TRUE) 
  
  ### This function aggregates the different observations per species (many species have several observations for the trait)
  
  my_aggregate_rules <- function(x) {
    if (length(x) > 1) {               
      x <- type.convert(x, as.is=TRUE)
      if (is.character(x)) {
        return(x[1])                   
      } else {
        return(as.character(mean(x)))  
      }
    } else {
      return(x)                        
    }
  }
  
  trait <- acast(metadata, specie_name~trait_name, value.var="value", fun.aggregate=my_aggregate_rules, fill="")
  
  
  trait_df <- data.frame(trait, stringsAsFactors=FALSE)
  
  
  allTrait_list<-list.append(allTrait_list,i=trait_df)
  
}

# name each dataframe
names(allTrait_list)<-c("IUCN", "Coloniality","Growth.rate","Sex.system", "Symbiodinium.subclade","Zooxanthellate")

# iterate through the list and save each trait's dataframe in a csv file
for (i in 1:length(allTrait_list)) {
  filename<-paste(names(allTrait_list[i]),".csv",sep="")
  print(filename)
  write.csv(allTrait_list[[i]],filename)
}

########################################################################################


##Import new tree##
newtree <- read.tree("Newtree.tre")

########################################################################################

#######Phylogenetic signal#########

traits.nosubclade <- read.csv("traits.nosubclade.csv", header = TRUE, row.names = 1)

##Pagels Lambda- continuous data##


growthrate.signal <- phylosig(tree = newtree, traits.nosubclade$Growth.rate, method = "lambda", test = TRUE)
growth.signal <- growthrate.signal$lambda

######################################################

##delta statistic - categorical data##



#NENTROPY
#returns the node entropies by calculating sum of the state entropies
#prob: matrix of state probabilities

nentropy <- function(prob) {
  
  k              <- ncol(prob)                       #number of states
  prob[prob>1/k] <- prob[prob>1/k]/(1-k) - 1/(1-k)   #state entropies
  tent           <- apply(prob,1,sum)                #node entropy
  
  #correct absolute 0/1
  tent[tent == 0] <- tent[tent == 0] + runif(1,0,1)/10000
  tent[tent == 1] <- tent[tent == 1] - runif(1,0,1)/10000
  
  return(tent)
}

#FUNCTION FOR BAYESIAN INFERENCES
#bayesian inferences on the node entropies 
#l0: rate parameter of the exponential prior distribution
#se: standard deviation of the proposal distribution 
#a:  alpha parameter (beta likelihood)
#b:  beta paramter (beta likelihood)
#x:  node entropies

lpalpha <- function(a,b,x,l0) {          #log posterior alpha
  N  <- length(x)
  lp <- N*(lgamma(a+b)-lgamma(a)) - a*(l0-sum(log(x)))
  return(lp)
}

lpbeta  <- function(a,b,x,l0) {          #log posterior beta
  N  <- length(x)
  lp <- N*(lgamma(a+b)-lgamma(b)) - b*(l0-sum(log(1-x)))
  return(lp)
}

mhalpha <- function(a,b,x,l0,se) {       #metropolis hastings alpha
  a0 <- a
  a1 <- exp(rnorm(1,log(a0),se))
  
  r  <- min(1, exp(lpalpha(a1,b,x,l0) - lpalpha(a0,b,x,l0) ) )
  
  while (is.na(r) == T) {
    a1 <- exp(rnorm(1,log(a0),se))
    r  <- min(1, exp(lpalpha(a1,b,x,l0) - lpalpha(a0,b,x,l0) ) )
  }
  
  if (runif(1) < r) {
    return(a1) 
  } else {
    return(a0)
  }
}

mhbeta  <- function(a,b,x,l0,se) {      #metropolis hastings beta
  b0 <- b
  b1 <- exp(rnorm(1,log(b0),se))
  
  r  <- min(1, exp(lpbeta(a,b1,x,l0) - lpbeta(a,b0,x,l0) ) )
  
  while (is.na(r) == T) {
    b1 <- exp(rnorm(1,log(b0),se))
    r  <- min(1, exp(lpbeta(a,b1,x,l0) - lpbeta(a,b0,x,l0) ) )
  }  
  
  if (runif(1) < r) {
    return(b1)
  } else {
    return(b0)
  }
}

#MCMC
#Markov chain monte carlo scheme using the conditional posteriors of alpha and beta
#alpha: initial value of alpha
#beta: initial values of beta
#x: node entropies
#sim: number of iterations
#thin: controles the number of saved iterations = sim/thin
#burn: number of iterates to burn

emcmc <- function(alpha,beta,x,l0,se,sim,thin,burn) {
  
  usim <- seq(burn,sim,thin)
  gibbs <- matrix(NA,ncol=2,nrow=length(usim))
  p <- 1
  
  for (i in 1:sim) {
    alpha <- mhalpha(alpha,beta,x,l0,se)
    beta  <- mhbeta(alpha,beta,x,l0,se)
    
    if (i == usim[p]) {
      gibbs[p,] <- c(alpha,beta)
      p <- p+1
    }
  }  
  return(gibbs)
}

#RATE MATRIX FOR TRAIT EVOLUTION. K=2 TO 5
ratematrix <- function(pi,rho){
  
  k <- length(pi)
  
  if (k==2){
    r <- c(pi[1]*0     ,pi[2]*rho[1],
           pi[1]*rho[1],pi[2]*0)
  }
  
  if (k==3){
    r <- c(pi[1]*0     ,pi[2]*rho[1],pi[3]*rho[2],
           pi[1]*rho[1],pi[2]*0     ,pi[3]*rho[3],
           pi[1]*rho[2],pi[2]*rho[3],pi[3]*0 )
  }
  
  if (k==4){
    r <- c(pi[1]*0     ,pi[2]*rho[1],pi[3]*rho[2],pi[4]*rho[3],
           pi[1]*rho[1],pi[2]*0     ,pi[3]*rho[4],pi[4]*rho[5],
           pi[1]*rho[2],pi[2]*rho[4],pi[3]*0     ,pi[4]*rho[6],
           pi[1]*rho[3],pi[2]*rho[5],pi[3]*rho[6],pi[4]*0 )
  }  
  
  if (k==5){
    r <- c(pi[1]*0     ,pi[2]*rho[1],pi[3]*rho[2],pi[4]*rho[3] ,pi[5]*rho[4],
           pi[1]*rho[1],pi[2]*0     ,pi[3]*rho[5],pi[4]*rho[6] ,pi[5]*rho[7],
           pi[1]*rho[2],pi[2]*rho[5],pi[3]*0     ,pi[4]*rho[8] ,pi[5]*rho[9],
           pi[1]*rho[3],pi[2]*rho[6],pi[3]*rho[8],pi[4]*0      ,pi[5]*rho[10],
           pi[1]*rho[4],pi[2]*rho[7],pi[3]*rho[9],pi[4]*rho[10],pi[5]*0)
  }
  
  R <- matrix(r,ncol=k,nrow=k) 
  diag(R) <- -rowSums(R)
  
  return(R)
}

#RTRAIT
#simulates the evolution of a trait in a given tree
# tree: metric-tree
# R: rate matrix
# nstates: number of states

rtrait <- function(tree,R,nstates) {
  
  nspecis <- length(tree$tip.label)
  
  #tree
  edge <- cbind(tree$edge,tree$edge.length)
  
  ancestral <- rep(NA,2*nspecies-1) 
  ancestral[nspecies+1] <- sample(1:nstates,1,prob=pi) 
  
  #rate change
  inode <- nspecies+1
  while (sum(is.na(ancestral)) > 0) {
    
    inode1 <-  edge[which(edge[,1]==inode)[1],2]
    inode2 <-  edge[which(edge[,1]==inode)[2],2]
    bl1 <- edge[which(edge[,1]==inode)[1],3]
    bl2 <- edge[which(edge[,1]==inode)[2],3]
    
    astate <- rep(0,nstates)
    astate[ancestral[inode]] <- 1 
    
    ancestral[inode1] <- sample(1:nstates,1,prob=astate%*%expm(R*bl1))
    ancestral[inode2] <- sample(1:nstates,1,prob=astate%*%expm(R*bl2))
    
    inode <- inode+1
  }
  return(ancestral[1:nspecies])
  
}

#DELTA
#calculate delta statistic
#trait: trait vector 
delta <- function(trait, tree,lambda0,se,sim,thin,burn) {
  
  ar <- ace(trait,tree,type="discrete",method="ML",model="ARD")$lik.anc
  
  # deletes the complex part whenever it pops up
  if (class(ar[1,1]) == "complex"){
    ar <- Re(ar)
  }
  
  x  <- nentropy(ar)
  mc1    <- emcmc(rexp(1),rexp(1),x,lambda0,se,sim,thin,burn)
  mc2    <- emcmc(rexp(1),rexp(1),x,lambda0,se,sim,thin,burn)
  mchain <- rbind(mc1,mc2)
  deltaA <- mean(mchain[,2]/mchain[,1])
  
  return(deltaA)
}

#Run delta function for all traits#

for (col in 1) {traits.nosubclade[,col] <- factor(traits.nosubclade[,col])}
for (col in 3:10) {traits.nosubclade[,col] <- factor(traits.nosubclade[,col])}
str(traits.nosubclade)

col.signal <- delta(trait = traits.nosubclade$Coloniality,tree = newtree, lambda0 = 0, se = 0.05, sim = 10000, burn = 100)
iucn.signal <- delta(trait = traits.nosubclade$IUCN.Red.List.category,tree = newtree, lambda0 = 0, se = 0.05, sim = 10000, burn = 100)
sex.signal <- delta(trait = traits.nosubclade$Sexual.System,tree = newtree, lambda0 = 0, se = 0.05, sim = 10000, burn = 100)
clade.signal <- delta(trait = traits.nosubclade$Symbiodinium.clade,tree = newtree, lambda0 = 0, se = 0.05, sim = 10000, burn = 100)
zoox.signal <- delta(trait = traits.nosubclade$Zooxanthellate,tree = newtree, lambda0 = 0, se = 0.05, sim = 10000, burn = 100)
sensi.signal <- delta(trait = traits.nosubclade$CC.sensitivity,tree = newtree, lambda0 = 0, se = 0.05, sim = 10000, burn = 100)
unadapt.signal <- delta(trait = traits.nosubclade$CC.unadaptability,tree = newtree, lambda0 = 0, se = 0.05, sim = 10000, burn = 100)
expo.signal <- delta(trait = traits.nosubclade$CC.exposure,tree = newtree, lambda0 = 0, se = 0.05, sim = 10000, burn = 100)
vulne.signal <- delta(trait = traits.nosubclade$Overall.CC.Vulnerability,tree = newtree, lambda0 = 0, se = 0.05, sim = 10000, burn = 100)


######delta p-value#####

#coloniality#
random_delta_col <- rep(NA,100)
for (i in 1:100){
  rtrait <- sample(traits.nosubclade$Coloniality)
  random_delta_col[i] <- delta(rtrait, newtree, lambda0 = 0, se = 0.05, sim = 10000,thin = 10, burn = 100)
}
p_value_col <- sum(random_delta_col>col.signal)/length(random_delta_col)
summary(random_delta_col)

#iucn red list#
random_delta_iucn <- rep(NA,100)
for (i in 1:100){
  rtrait <- sample(traits.nosubclade$IUCN.Red.List.category)
  random_delta_iucn[i] <- delta(rtrait, newtree, lambda0 = 0, se = 0.05, sim = 10000,thin = 10, burn = 100)
}
p_value_iucn <- sum(random_delta_iucn>iucn.signal)/length(random_delta_iucn)
summary(random_delta_iucn)

#sexual system#
random_delta_sex <- rep(NA,100)
for (i in 1:100){
  rtrait <- sample(traits.nosubclade$Sexual.System)
  random_delta_sex[i] <- delta(rtrait, newtree, lambda0 = 0, se = 0.05, sim = 10000,thin = 10, burn = 100)
}
p_value_sex <- sum(random_delta_sex>sex.signal)/length(random_delta_sex)
summary(random_delta_sex)

#symbiodinium clade#
random_delta_clade <- rep(NA,100)
for (i in 1:100){
  rtrait <- sample(traits.nosubclade$Symbiodinium.clade)
  random_delta_clade[i] <- delta(rtrait, newtree, lambda0 = 0, se = 0.05, sim = 10000,thin = 10, burn = 100)
}
p_value_clade <- sum(random_delta_clade>clade.signal)/length(random_delta_clade)
summary(random_delta_clade)

#zooxantallae#
random_delta_zoox <- rep(NA,100)
for (i in 1:100){
  rtrait <- sample(traits.nosubclade$Zooxanthellate)
  random_delta_zoox[i] <- delta(rtrait, newtree, lambda0 = 0, se = 0.05, sim = 10000,thin = 10, burn = 100)
}
p_value_zoox <- sum(random_delta_zoox>zoox.signal)/length(random_delta_zoox)
summary(random_delta_zoox)

#CC sensitivity#
random_delta_sensi <- rep(NA,100)
for (i in 1:100){
  rtrait <- sample(traits.nosubclade$CC.sensitivity)
  random_delta_sensi[i] <- delta(rtrait, newtree, lambda0 = 0, se = 0.05, sim = 10000,thin = 10, burn = 100)
}
p_value_sensi <- sum(random_delta_sensi>sensi.signal)/length(random_delta_sensi)
summary(random_delta_sensi)

#CC unadaptability#
random_delta_unadapt <- rep(NA,100)
for (i in 1:100){
  rtrait <- sample(traits.nosubclade$CC.unadaptability)
  random_delta_unadapt[i] <- delta(rtrait, newtree, lambda0 = 0, se = 0.05, sim = 10000,thin = 10, burn = 100)
}
p_value_unadapt <- sum(random_delta_unadapt>unadapt.signal)/length(random_delta_unadapt)
summary(random_delta_unadapt)

#CC exposure#
random_delta_expo <- rep(NA,100)
for (i in 1:100){
  rtrait <- sample(traits.nosubclade$CC.exposure)
  random_delta_expo[i] <- delta(rtrait, newtree, lambda0 = 0, se = 0.05, sim = 10000,thin = 10, burn = 100)
}
p_value_expo <- sum(random_delta_expo>expo.signal)/length(random_delta_expo)
summary(random_delta_expo)

#CC vulnerability#
random_delta_vulne <- rep(NA,100)
for (i in 1:100){
  rtrait <- sample(traits.nosubclade$Overall.CC.Vulnerability)
  random_delta_vulne[i] <- delta(rtrait, newtree, lambda0 = 0, se = 0.05, sim = 10000,thin = 10, burn = 100)
}
p_value_vulne <- sum(random_delta_vulne>vulne.signal)/length(random_delta_vulne)
summary(random_delta_vulne)


#combine plots#
par(mfrow=c(2,3))

##make plots##

#1st combination#
par(mfrow=c(2,2))

boxplot(random_delta_sex, main = "Sexual System", ylab = "Phylogenetic signal value", xlab = "Random deltas", ylim = c(0,4))
abline(h=c(sex.signal), col = "red")
text(locator(), labels = c("True Phylogenetic Signal: 3.74"), cex = 0.5)
text(locator(), labels = c("*P-value: 0"), col = "orange", cex = 0.5)

boxplot(random_delta_unadapt, main = "CC Unadaptability", ylab = "Phylogenetic signal value", xlab = "Random deltas", ylim = c(0,2.3))
abline(h=c(unadapt.signal), col = "red")
text(locator(), labels = c("True Phylogenetic Signal: 1.98"), cex = 0.5)
text(locator(), labels = c("*P-value: 0.01"), col = "orange", cex = 0.5)

boxplot(random_delta_col, main = "Coloniality", ylab = "Phylogenetic signal value", xlab = "Random deltas")
abline(h=c(col.signal), col = "red")
text(locator(), labels = c("True Phylogenetic Signal: 9.08"), cex = 0.5)
text(locator(), labels = c("*P-value: 0.03"), col = "orange", cex = 0.5)

#2nd combination#

par(mfrow=c(2,2))

boxplot(random_delta_vulne, main = "CC Vulnerability", ylab = "Phylogenetic signal value", xlab = "Random deltas")
abline(h=c(vulne.signal), col = "red")
text(locator(), labels = c("True Phylogenetic Signal: 1.88"), cex = 0.5)
text(locator(), labels = c("*P-value: 0.53"), col = "orange", cex = 0.5)

boxplot(random_delta_expo, main = "CC Exposure", ylab = "Phylogenetic signal value", xlab = "Random deltas")
abline(h=c(expo.signal), col = "red")
text(locator(), labels = c("True Phylogenetic Signal: 0.59"), cex = 0.5)
text(locator(), labels = c("*P-value: 0.63"), col = "orange", cex = 0.5)

boxplot(random_delta_clade, main = "Symbiodinium Clade", ylab = "Phylogenetic signal value", xlab = "Random deltas")
abline(h=c(clade.signal), col = "red")
text(locator(), labels = c("True Phylogenetic Signal: 2.30"), cex = 0.5)
text(locator(), labels = c("*P-value: 0.96"), col = "orange", cex = 0.5)

par(mfrow=c(2,2))

plot(phylosig(tree = newtree, traits.nosubclade$Growth.rate, method = "lambda", test = TRUE), main ="Growth Rate")
title( main = "Growth rate")
text(locator(), labels = c("*P-value: 0.036"), col = "orange", cex = 0.5)
text(locator(), labels = c("0.17"), col = "black", cex = 0.5)
p_value_growth <- growthrate.signal$P #p-value lambda#

boxplot(random_delta_zoox, main = "Zooxanthellae", ylab = "Phylogenetic signal value", xlab = "Random deltas")
abline(h=c(zoox.signal), col = "red")
text(locator(), labels = c("True Phylogenetic Signal: 8.87"), cex = 0.5)
text(locator(), labels = c("*P-value: 0.96"), col = "orange", cex = 0.5)

#3rd combination#
par(mfrow=c(2,2))

boxplot(random_delta_iucn, main = "IUCN Red List Cat.", ylab = "Phylogenetic signal value", xlab = "Random deltas", ylim = c(0.55, 0.8))
abline(h=c(iucn.signal), col = "red")
text(locator(), labels = c("True Phylogenetic Signal: 0.59"), cex = 0.5)
text(locator(), labels = c("*P-value: 1"), col = "orange", cex = 0.5)

boxplot(random_delta_sensi, main = "CC Sensitivity", ylab = "Phylogenetic signal value", xlab = "Random deltas", ylim = c(15,69))
abline(h=c(sensi.signal), col = "red")
text(locator(), labels = c("True Phylogenetic Signal: 21.32"), cex = 0.5)
text(locator(), labels = c("*P-value: 0.98"), col = "orange", cex = 0.5)


################################################################################

####Imputation####


##Import phylogeny traits no subclade##
traits.nosubclade <- read.csv("traits.nosubclade.csv", header = TRUE, row.names = 1)

#turn traits.nosubclade into factors#
for (col in 1) {traits.nosubclade[,col] <- factor(traits.nosubclade[,col])}
for (col in 3:10) {traits.nosubclade[,col] <- factor(traits.nosubclade[,col])}

##Imputation using missForest## 
trait.imp <- missForest(traits.nosubclade)

##Create & export imputed dataframe##
imputed.species <- as.data.frame(trait.imp$ximp)
write.csv(imputed.species, "Imputed species.csv")



####################################################################################

######PGLM analysis#######


#import imputed.species.binary for analysis#
imp.spp.binary <- read.csv("Imputed.species.binary.csv", header = TRUE, row.names = 1)

#import and name check new tree#
newtree <- read.tree("Newtree.tre")
name.check(newtree, imp.spp.binary)


#investigates relationship between traits use PGLM#

herma.unadapt.glm <- phyloglm(CC.unadaptability~hermaphrodite, data = imp.spp.binary, phy = newtree)
summary(herma.unadapt.glm)

gono.unadapt.glm <- phyloglm(CC.unadaptability~gonochore,data = imp.spp.binary, phy = newtree)
summary(gono.unadapt.glm)

growth.unadapt.glm <- phyloglm(CC.unadaptability~Growth.rate, data = imp.spp.binary, phy = newtree)
summary(growth.unadapt.glm)

cladeA.unadapt.glm <- phyloglm(CC.unadaptability~Clade.A, data = imp.spp.binary, phy = newtree)
summary(cladeA.unadapt.glm)

cladeB.unadapt.glm <- phyloglm(CC.unadaptability~Clade.B, data = imp.spp.binary, phy = newtree)
summary(cladeB.unadapt.glm)

cladeC.unadapt.glm <- phyloglm(CC.unadaptability~Clade.C, data = imp.spp.binary, phy = newtree)
summary(cladeC.unadapt.glm)

cladeD.unadapt.glm <- phyloglm(CC.unadaptability~Clade.D, data = imp.spp.binary, phy = newtree)
summary(cladeD.unadapt.glm)


###phyloglmstep###

glmstep_significant <- phyloglmstep(CC.unadaptability~gonochore+Growth.rate+Clade.C+Clade.B, data = imp.spp.binary,phy = newtree, direction = "back")
summary(glmstep_significant)

glmstep_significant_2 <-phyloglmstep(CC.unadaptability~hermaphrodite+Growth.rate+Clade.C+Clade.B, data = imp.spp.binary,phy = newtree, direction = "back")
summary(glmstep_significant_2)
